// <auto-generated />
using System;
using DB.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Infrastructure.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    partial class SqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("institutionseq")
                .IncrementsBy(10);

            modelBuilder.Entity("AnalysisMicroorganism", b =>
                {
                    b.Property<int>("analysis_id")
                        .HasColumnType("int");

                    b.Property<int>("microorganism_id")
                        .HasColumnType("int");

                    b.HasKey("analysis_id", "microorganism_id");

                    b.HasIndex("microorganism_id");

                    b.ToTable("AnalysisMicroorganism");
                });

            modelBuilder.Entity("DB.Domain.Entities.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Analysis", (string)null);
                });

            modelBuilder.Entity("DB.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("institution_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("institution_id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("DB.Domain.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "institutionseq");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("DB.Domain.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Instrument", (string)null);
                });

            modelBuilder.Entity("DB.Domain.Entities.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Keyword", (string)null);
                });

            modelBuilder.Entity("DB.Domain.Entities.Microorganism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Microorganism", (string)null);
                });

            modelBuilder.Entity("EmployeeKeyword", b =>
                {
                    b.Property<int>("employee_id")
                        .HasColumnType("int");

                    b.Property<int>("keyword_id")
                        .HasColumnType("int");

                    b.HasKey("employee_id", "keyword_id");

                    b.HasIndex("keyword_id");

                    b.ToTable("EmployeeKeyword");
                });

            modelBuilder.Entity("InstitutionAnalyses", b =>
                {
                    b.Property<int>("analysis_id")
                        .HasColumnType("int");

                    b.Property<int>("institution_id")
                        .HasColumnType("int");

                    b.HasKey("analysis_id", "institution_id");

                    b.HasIndex("institution_id");

                    b.ToTable("InstitutionAnalyses");
                });

            modelBuilder.Entity("InstitutionInstrument", b =>
                {
                    b.Property<int>("institution_id")
                        .HasColumnType("int");

                    b.Property<int>("instrument_id")
                        .HasColumnType("int");

                    b.HasKey("institution_id", "instrument_id");

                    b.HasIndex("instrument_id");

                    b.ToTable("InstitutionInstrument");
                });

            modelBuilder.Entity("InstitutionKeyword", b =>
                {
                    b.Property<int>("institution_id")
                        .HasColumnType("int");

                    b.Property<int>("keyword_id")
                        .HasColumnType("int");

                    b.HasKey("institution_id", "keyword_id");

                    b.HasIndex("keyword_id");

                    b.ToTable("InstitutionKeyword");
                });

            modelBuilder.Entity("InstitutionMicroorganism", b =>
                {
                    b.Property<int>("institution_id")
                        .HasColumnType("int");

                    b.Property<int>("microorganism_id")
                        .HasColumnType("int");

                    b.HasKey("institution_id", "microorganism_id");

                    b.HasIndex("microorganism_id");

                    b.ToTable("InstitutionMicroorganism");
                });

            modelBuilder.Entity("AnalysisMicroorganism", b =>
                {
                    b.HasOne("DB.Domain.Entities.Analysis", null)
                        .WithMany()
                        .HasForeignKey("analysis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Microorganism", null)
                        .WithMany()
                        .HasForeignKey("microorganism_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Domain.Entities.Employee", b =>
                {
                    b.HasOne("DB.Domain.Entities.Institution", "Institution")
                        .WithMany("Employees")
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("EmployeeKeyword", b =>
                {
                    b.HasOne("DB.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("keyword_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutionAnalyses", b =>
                {
                    b.HasOne("DB.Domain.Entities.Analysis", null)
                        .WithMany()
                        .HasForeignKey("analysis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutionInstrument", b =>
                {
                    b.HasOne("DB.Domain.Entities.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Instrument", null)
                        .WithMany()
                        .HasForeignKey("instrument_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutionKeyword", b =>
                {
                    b.HasOne("DB.Domain.Entities.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("keyword_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstitutionMicroorganism", b =>
                {
                    b.HasOne("DB.Domain.Entities.Institution", null)
                        .WithMany()
                        .HasForeignKey("institution_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Domain.Entities.Microorganism", null)
                        .WithMany()
                        .HasForeignKey("microorganism_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB.Domain.Entities.Institution", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
